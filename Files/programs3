using LogiTrack;
using LogiTrack.Models;
using LogiTrack.Middleware;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using System.Text;

var builder = WebApplication.CreateBuilder(args);

// ✅ Load environment variables from .env file
DotNetEnv.Env.Load();

// ✅ Get sensitive values from environment
var apiKey = Environment.GetEnvironmentVariable("API_KEY") ?? throw new Exception("API_KEY is missing in environment.");
var jwtSecret = Environment.GetEnvironmentVariable("JWT_SECRET") ?? throw new Exception("JWT_SECRET is missing in environment.");

// ✅ Register DbContext with Identity support (uses ApplicationUser)
builder.Services.AddDbContext<LogiTrackContext>();

// ✅ Register ASP.NET Identity with EF Core and default token providers
builder.Services.AddIdentity<ApplicationUser, IdentityRole>()
    .AddEntityFrameworkStores<LogiTrackContext>()
    .AddDefaultTokenProviders();

// ✅ Configure JWT authentication
builder.Services.AddAuthentication(options =>
{
    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
})
.AddJwtBearer(options =>
{
    options.TokenValidationParameters = new TokenValidationParameters
    {
        ValidateIssuer = false,  // For demo; set to true and configure properly for production
        ValidateAudience = false,
        ValidateLifetime = true,
        ValidateIssuerSigningKey = true,
        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(jwtSecret))
    };
});

// ✅ Add Authorization services (required for [Authorize] to work)
builder.Services.AddAuthorization();

// ✅ Register controllers with JSON options to prevent circular reference crashes
builder.Services.AddControllers().AddJsonOptions(options =>
{
    options.JsonSerializerOptions.ReferenceHandler = System.Text.Json.Serialization.ReferenceHandler.Preserve;
});

var app = builder.Build();

// ✅ Seed database at startup using scoped service
using (var scope = app.Services.CreateScope())
{
    var context = scope.ServiceProvider.GetRequiredService<LogiTrackContext>();
    DbInitializer.Seed(context);
}

// ✅ Apply API Key Middleware BEFORE authentication
app.UseMiddleware<ApiKeyMiddleware>();

// ✅ Standard Authentication & Authorization middlewares
app.UseAuthentication();
app.UseAuthorization();

// ✅ Map controller routes
app.MapControllers();

app.Run();
