using LogiTrack;
using LogiTrack.Models;
using LogiTrack.Middleware;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using System.Text;

var builder = WebApplication.CreateBuilder(args);

// ✅ Load environment variables from .env file
DotNetEnv.Env.Load();

// ✅ Get sensitive values from environment
var apiKey = Environment.GetEnvironmentVariable("API_KEY") ?? throw new Exception("API_KEY is missing in environment.");
var jwtSecret = Environment.GetEnvironmentVariable("JWT_SECRET") ?? throw new Exception("JWT_SECRET is missing in environment.");

// ✅ Register DbContext with DI container and SQLite explicitly
builder.Services.AddDbContext<LogiTrackContext>(options =>
    options.UseSqlite("Data Source=logitrack.db"));

// ✅ Add ASP.NET Identity with default options
builder.Services.AddIdentity<ApplicationUser, IdentityRole>()
    .AddEntityFrameworkStores<LogiTrackContext>();

// ✅ Add JWT Authentication
builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddJwtBearer(options =>
    {
        options.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuer = false,
            ValidateAudience = false,
            ValidateLifetime = true,
            ValidateIssuerSigningKey = true,
            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(jwtSecret))
        };
    });

// ✅ Add Authorization
builder.Services.AddAuthorization();

// ✅ Register controllers with JSON options to prevent circular reference crashes
builder.Services.AddControllers().AddJsonOptions(options =>
{
    options.JsonSerializerOptions.ReferenceHandler = System.Text.Json.Serialization.ReferenceHandler.Preserve;
});

var app = builder.Build();

// ✅ Seed database AND ensure roles exist
using (var scope = app.Services.CreateScope())
{
    var services = scope.ServiceProvider;
    var context = services.GetRequiredService<LogiTrackContext>();
    var roleManager = services.GetRequiredService<RoleManager<IdentityRole>>();

    DbInitializer.Seed(context);
    await SeedRolesAsync(roleManager);
}

// ✅ Add custom API key middleware BEFORE authentication
app.UseMiddleware<ApiKeyMiddleware>();

// ✅ Add authentication and authorization middlewares
app.UseAuthentication();
app.UseAuthorization();

// ✅ Map controller routes
app.MapControllers();

app.Run();

// ✅ Role seeding method to create roles if missing
async Task SeedRolesAsync(RoleManager<IdentityRole> roleManager)
{
    string[] roles = { "Admin", "User", "Manager" };

    foreach (var role in roles)
    {
        if (!await roleManager.RoleExistsAsync(role))
        {
            await roleManager.CreateAsync(new IdentityRole(role));
        }
    }
}
