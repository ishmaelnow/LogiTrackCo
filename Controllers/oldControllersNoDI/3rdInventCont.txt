using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Authorization;
using LogiTrack.Models;

namespace LogiTrack.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    [Authorize] // Requires valid JWT for all actions
    public class InventoryController : ControllerBase
    {
        private readonly LogiTrackContext _context;

        public InventoryController(LogiTrackContext context)
        {
            _context = context;
        }

        // Only Admins can view all inventory
        [HttpGet]
        [Authorize(Roles = "Admin")]
        public ActionResult<IEnumerable<InventoryItem>> GetInventory()
        {
            var items = _context.InventoryItems.Include(i => i.Order).ToList();
            return Ok(items);
        }

        // Any authenticated user can view a specific item
        [HttpGet("{id}")]
        public ActionResult<InventoryItem> GetInventoryItem(int id)
        {
            var item = _context.InventoryItems.Include(i => i.Order).FirstOrDefault(i => i.ItemId == id);
            if (item == null) return NotFound();
            return Ok(item);
        }

        // Only Admins can add inventory
        [HttpPost]
        [Authorize(Roles = "Admin")]
        public ActionResult<InventoryItem> CreateInventoryItem([FromBody] InventoryItem newItem)
        {
            _context.InventoryItems.Add(newItem);
            _context.SaveChanges();
            return CreatedAtAction(nameof(GetInventoryItem), new { id = newItem.ItemId }, newItem);
        }

        // Only Admins can update inventory
        [HttpPut("{id}")]
        [Authorize(Roles = "Admin")]
        public ActionResult UpdateInventoryItem(int id, [FromBody] InventoryItem updatedItem)
        {
            var existingItem = _context.InventoryItems.Find(id);
            if (existingItem == null) return NotFound();

            existingItem.Name = updatedItem.Name;
            existingItem.Quantity = updatedItem.Quantity;
            existingItem.Location = updatedItem.Location;
            existingItem.OrderId = updatedItem.OrderId;

            _context.SaveChanges();
            return NoContent();
        }

        // Only Admins can delete inventory
        [HttpDelete("{id}")]
        [Authorize(Roles = "Admin")]
        public ActionResult DeleteInventoryItem(int id)
        {
            var item = _context.InventoryItems.Find(id);
            if (item == null) return NotFound();

            _context.InventoryItems.Remove(item);
            _context.SaveChanges();
            return NoContent();
        }
    }
}
